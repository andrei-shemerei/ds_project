name: Publish Package

on: workflow_dispatch

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine requests setuptools wheel
          
      - name: Create .pypirc
        run: |
          echo "[distutils]" > ~/.pypirc
          echo "index-servers =" >> ~/.pypirc
          echo "    testpypi" >> ~/.pypirc
          echo "" >> ~/.pypirc
          echo "[testpypi]" >> ~/.pypirc
          echo "repository = https://test.pypi.org/legacy/" >> ~/.pypirc
          echo "username = ${{ secrets.TESTPYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.TESTPYPI_PASSWORD }}" >> ~/.pypirc

      - name: Build the package
        run: python -m build

      - name: Check if version exists on TestPyPI
        id: check-version
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          VERSION=$(python setup.py --version)
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://test.pypi.org/pypi/$PACKAGE_NAME/$VERSION/json)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Version $VERSION of $PACKAGE_NAME already exists on TestPyPI."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Publish to TestPyPI
        if: env.exists == 'false'
        run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}

      - name: Skip publishing
        if: env.exists == 'true'
        run: echo "Skipping publishing as the version already exists on TestPyPI."